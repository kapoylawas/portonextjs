import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["children", "defaultOffset", "reverse", "pause", "speed"];
import React, { forwardRef, useEffect, useMemo, useRef, useState } from 'react';

/**
 * react-marquease
 */
var Marquee = /*#__PURE__*/forwardRef(function (_ref, ref) {
  var children = _ref.children,
    _ref$defaultOffset = _ref.defaultOffset,
    defaultOffset = _ref$defaultOffset === void 0 ? 0 : _ref$defaultOffset,
    _ref$reverse = _ref.reverse,
    reverse = _ref$reverse === void 0 ? false : _ref$reverse,
    _ref$pause = _ref.pause,
    pause = _ref$pause === void 0 ? false : _ref$pause,
    _ref$speed = _ref.speed,
    speed = _ref$speed === void 0 ? 1 : _ref$speed,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    mounted = _useState2[0],
    setMounted = _useState2[1];
  var _useState3 = useState(null),
    _useState4 = _slicedToArray(_useState3, 2),
    clientHeight = _useState4[0],
    setClientHeight = _useState4[1];
  var _useState5 = useState(null),
    _useState6 = _slicedToArray(_useState5, 2),
    clientWidth = _useState6[0],
    setClientWidth = _useState6[1];
  var _useState7 = useState(defaultOffset),
    _useState8 = _slicedToArray(_useState7, 2),
    offset = _useState8[0],
    setOffset = _useState8[1];
  var childrenRef = useRef(null);
  var intervalRef = useRef(null);
  useEffect(function () {
    setMounted(true);
  }, []);
  useEffect(function () {
    if (mounted) {
      var _childrenRef$current3, _childrenRef$current4;
      var handleResize = function handleResize() {
        var _childrenRef$current, _childrenRef$current2;
        setClientHeight(((_childrenRef$current = childrenRef.current) === null || _childrenRef$current === void 0 ? void 0 : _childrenRef$current.clientHeight) || 0);
        setClientWidth(((_childrenRef$current2 = childrenRef.current) === null || _childrenRef$current2 === void 0 ? void 0 : _childrenRef$current2.clientWidth) || 0);
      };
      window.addEventListener('resize', handleResize);
      setClientHeight(((_childrenRef$current3 = childrenRef.current) === null || _childrenRef$current3 === void 0 ? void 0 : _childrenRef$current3.clientHeight) || 0);
      setClientWidth(((_childrenRef$current4 = childrenRef.current) === null || _childrenRef$current4 === void 0 ? void 0 : _childrenRef$current4.clientWidth) || 0);
      return function () {
        window.removeEventListener('resize', handleResize);
      };
    }
  }, [mounted]);
  useEffect(function () {
    var tick = function tick() {
      var direction = reverse ? 1 : -1;
      setOffset(function (prevState) {
        var _childrenRef$current5;
        var nextOffset = prevState + direction * speed;
        if (Math.abs(nextOffset) >= (((_childrenRef$current5 = childrenRef.current) === null || _childrenRef$current5 === void 0 ? void 0 : _childrenRef$current5.clientWidth) || 0)) {
          nextOffset = 0;
        }
        return nextOffset;
      });
    };
    clearInterval(intervalRef.current);
    if (!pause) {
      intervalRef.current = window.setInterval(tick, 50);
    }
    return function () {
      clearInterval(intervalRef.current);
    };
  }, [childrenRef, intervalRef, pause, reverse, speed]);
  var childClones = useMemo(function () {
    if (typeof window === 'undefined') return null;
    var cloneCount = Math.max(2, clientWidth ? Math.ceil(window.innerWidth / (clientWidth / 2)) : 0);
    var direction = reverse ? 1 : -1;
    return Array(cloneCount).fill(0).map(function (item, index) {
      return /*#__PURE__*/React.createElement("div", {
        key: "marquee-clone-".concat(index),
        "data-marquee-child": index,
        style: {
          position: 'absolute',
          top: 0,
          right: reverse ? 0 : 'auto',
          transform: "translateX(".concat(clientWidth * index * direction * -1, "px)")
        }
      }, children);
    });
  }, [children, clientWidth, reverse]);
  if (!mounted) return null;
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: ref
  }, rest, {
    style: {
      position: 'relative',
      height: clientHeight,
      overflow: 'hidden'
    }
  }), /*#__PURE__*/React.createElement("div", {
    ref: childrenRef,
    style: {
      position: 'absolute',
      top: '-9999px',
      left: '-9999px'
    }
  }, children), /*#__PURE__*/React.createElement("div", {
    "data-qa": "scroller",
    style: {
      transform: "translateX(".concat(offset, "px)")
    }
  }, childClones));
});
Marquee.displayName = 'Marquee';
export default Marquee;